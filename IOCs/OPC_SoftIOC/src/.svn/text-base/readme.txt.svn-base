OPC Device Support
**************************************************************

*  Author  : Kuner, Winkler

Overview and Features
==============================================================================

The OPC device driver provides direct access for EPICS records to items
located on an OPC server. It has the following features:

* Data conversion for all integer and float data types - array support is not
  yet implemented.

* (Out-records: #recordScan) become bidirectional In/Out-records. The EPICS Out-record will
  be updated if the OPC item is written by another device (e.g. PLC).

* Support for the following record types:

- ai, ao
- bi, bo - mbbi, mbbo
- mbbiDirect, mbboDirect
- longin, longout
- stringin, stringout
- (waveform record is in work)

* The data conversion capabilities of the binary records (bi, bo, mbbi, mbbo,
  mbbiDirect, mbboDirect) are supported with two dtypes "opc" and "opcRaw" as
  described in the Record Reference Manual for the "Soft Channel" and "Raw Soft
  Channel" types.
 
* Timestamp is generated by OPC server or EPICS (source is determined by the
  record's TSE field).

* OPC quality is mapped to record's STAT/SEVR fields.

* (Setup the OPC client: #setupOpcClient) with special features:

- Support for connections to multiple servers and several groups per server
- Maps OPC item names to EPICS record names. This is a feature that may be 
  used to map long OPC names to EPICS demand that requires short names
  (29 characters)

* Error logging using the iocLogClient.

* Available console commands for debugging purposes:

- opcBrowse: Browses OPC server.
- opcDbg: Sets level for debug output.

Directory structure
==============================================================================

*  The windows installable  will install these files (full installation):

  C:\Program Files\OpcIocShell\
                            readme.html
                            startDemo.bat
                            unins000.dat
                            unins000.exe
                            bin\
                                asIoc.dll
                                ca.dll
                                caget.exe
                                camonitor.exe
                                caput.exe
                                caRepeater.exe
                                Com.dll
                                dbIoc.dll
                                dbStaticIoc.dll
                                dbtoolsIoc.dll
                                gdd.dll
                                Icons.dll
                                iocLogServer.exe
                                iocsh.dll
                                miscIoc.dll
                                MSVCP60.DLL
                                MSVCP60D.DLL
                                MSVCRT.DLL
                                MSVCRTD.DLL
                                OpcIoc.exe
                                recIoc.dll
                                registryIoc.dll
                                rsrvIoc.dll
                                SOCltadd.DLL
                                SOCmnadd.DLL
                                SODaCadd.DLL
                                softDevIoc.dll
                            dbd\
                                iocShell.dbd
                            demo\
                                DemoRecord1.db
                                DemoRecord2.db
                                st.cmd
                            src\
                                Creator.cpp
                                Creator.h
                                cthread.h
                                devOpc.c
                                devOpc.h
                                drvOpc.cpp
                                drvOpc.h
                                errDbg.cpp
                                errDbg.h
                                Group.cpp
                                Group.h
                                iocShellMain.cpp
                                Item.cpp
                                Item.h
                                Makefile
                                O.win32-x86
                                Opc.cpp
                                Opc.h
                                opcConsoleCmd.cpp
                                opcConsoleCmd.h
                                readme.txt
                                Server.cpp
                                Server.h
                                StdAfx.h

*  the tar file  : will install only the sources like this:

../opcApp/src        | iocShell and device support
../opcApp/Db         | a test and demonstration: opcTest.db and opcTest.adl
../opcApp/testOpcApp | a console client for opc access without epics
 
Install and Compile
==============================================================================

The OpcApp_2_1.exe should install the precompiled iocShell and its .dll's in a
proper way.

For recompilation of the opcIocShell the OPC Toolkit from (Softing: http://www.softing.com) 
is neccessary. We use OPC Toolkit version 3.01.
To run the example, "MMI OPC" OPC-server simulator should be installed. It comes
with the "OPC Explorer" from (MMI OPC: http://www.mmiopc.com/download.htm).

iocShell Commands for OPC interface
==============================================================================

opcDbg: Set debug level
------------------------------------------------------------------------------

Used to control the output of debugging information. The default is '0' to be
completely quiet. More informations via "help opcDbg".

*  Syntax  :

  opcDbg(n_debugLevel)

*  Parameters  :

- n_debugLevel: number

opcIor: IO report
------------------------------------------------------------------------------

Create a report of all records that use OPC device support.

*  Syntax  :

  opcIor

Output format:

  epicsName, Record Type, Dtype, opcName, opcFullName

(anchor: #setupOpcClient)

Setup the OPC client
==============================================================================

There is a special way to add groups and items to an OPC server. The st.cmd 
file is more than the commands of the iocShell. It is also parsed by the opc interface
routine! The idea is to have one file to setup the iocShell and also the opcClient.
See the example:

*  Example  : of an st.cmd that shows the OPC client setup:

    iocShell_registerRecordDeviceDriver(pdbbase)
    opcSetNames("../names.txt")
    opcSetServer("localhost","MMIOPC.Simulator")
    opcSetGroup("myGroup3seconds","3000")
    dbLoadRecords("./DemoRecord1.db")
    opcSetGroup("myGroup6seconds","6000")
    dbLoadRecords("./DemoRecord2.db")
    iocShell_registerRecordDeviceDriver(pdbbase)
    iocInit()

- First of all the whole st.cmd file will be parsed by the opc interface routine.
  This process builds the full data stucture for opc session(s) and connects it(them)
  to the opc server(s).
- The call of 'opcSetNames' defines the name mapping file. This is not neccessary
  if there are no opc item names that exceed the string length of 29 characters.
- 'opcSetServer' configures OPC server connection of iocShell (opc interface).
  This command creates a new opc client-server session.
- 'opcSetGroup' adds a group with assigned name and update rate to actually opc session
  and to puts all items in the following 'dbLoadRecord' ('dbLoadTemplate') commands to 
  this group.
  Note: The '.db(.substitutions)' files will also be parsed by the interface routine 
  to achieve the item names.
- The occurence of further 'opcSetGroup' commands will setup other groups and put 
  the following OPC items from '.db' files to this group.
- None opc items will be ignored by the opc interface routine. They will be added to
  the epics data base only.


opcSetServer: Creates an OPC server instance
------------------------------------------------------------------------------

Used only in st.cmd, not from the command line. It configures iocShell for 
connecting to OPC server.

It's possible to connect iocShell to miscellaneous OPC servers.

*  Syntax  :

 opcSetServer("hostName", "serverName")

*  Parameters  :

- hostName: where the OPC server is hosted (IP address possible)
- serverName: name of the OPC server


opcSetGroup: Creates a new OPC item group at current server
------------------------------------------------------------------------------

Used only in st.cmd, not from the command line. It creates a new OPC item group at current OPC server. It's
possible to create miscellaneous groups with several update rates at same server.
According to the OPC "Data Access" specification it is mandatory to define at least one group.

*  Syntax  :

 opcSetGroup("groupName","n_scanRate")

*  Parameters  :

- groupName: find a reasonable or a fancy name for it
- n_scanRate: update rate (in milliseconds; >0ms) of the OPC items in this group


opcSetNames: Item name mapping
------------------------------------------------------------------------------

Used only in st.cmd, not from the command line. It sets the file for name mapping.

The problem is that the record's INP or OUT fields have a limited length for
the name of the OPC item. On the other hand, OPC servers can have huge name
lengths for those items. So a map file may be defined to map the long OPC
server names to short names suited for the record's link field.

The map file format is:

 # allowed are comments and lines like this with leading spaces:
 epicsName = opcName
 # don't forget a blank line at end of file

*  Syntax  :

 opcSetNames("fileName")

*  Parameters  :

- fileName: yes, you guess right, but don't forget the path to your file.


Set up a st.cmd for the ioc shell
==============================================================================

This example shows how to set up an IOC

   # Make sure that the dbd contains the lines for "opc" and "opcRaw"
   dbLoadDatabase("./iocShell.dbd",0,0)
   iocShell_registerRecordDeviceDriver(pdbbase)
   # registerRecordDeviceDriver(pdbbase)  <= old command, won't work with epics base 3.14.6 and higher!!!
   #
   # Name mapping is not required here
   # opcSetNames("../names.txt")
   #
   # This example uses the "MMI OPC" OPC-server simulator at local host
   opcSetServer("localhost","MMIOPC.Simulator")
   # very slow group, scanning every 3 seconds
   opcSetGroup("myGroup3seconds","3000")
   dbLoadRecords("./DemoRecord1.db")
   #
   # very slow group, scanning every 6 seconds
   opcSetGroup("myGroup6seconds","6000")
   dbLoadRecords("./DemoRecord2.db")
   #
   iocInit()


Record related issues
==============================================================================

(anchor: #recordScan)

Record scanning
------------------------------------------------------------------------------

* In-records

The device support accepts all but "Passive". Due to the update facilities of
the OPC group it is not reasonable to define a scan rate faster than the
update rate of the group. To get the same scan rate for the record set
SCAN="I/O Intr". To allow a slower than the update rate (for whatever reason)
the fixed scan rates are supported: SCAN=".1 second" to SCAN="10 second".

* Out-records

As mentioned before out-records are now bidirectional in/out-records. They
will be updated to the new value if it is changed on the OPC server by any
other way (e.g. the PLC or another OPC client).

For out-records the SCAN field is ignored by the device support and should be
set to "Passive". Nevertheless, if the OPC server gets a new value for the
OPC item the record will be processed to update the value, send monitors,
check for limits, set severities and process forward links.

Writing to the hardware from two sides (EPICS and the hardware covered by the
OPC server) at the same time can cause problems.

For values that are frequently written by the PLC a write by the EPICS record
will be overwritten in the opc-server by the PLC  before  it is sent to the PLC
from the opc-server. In this case a 'caput' will not be recognized by the PLC!

*  This is a behaviour due to the opc-server and PLC,  no bug in the EPICS device support.

Also an EPICS write that follows immediately after a PLC write (very short time),
may be discarded by the device support.


Device types and data conversion
------------------------------------------------------------------------------

There are two types available: DTYP="opc" for all records and the
DTYP="opcRaw" for the binary records: bi, mbbo, mbbi, mbboDirect and
mbbiDirect. The behaviour of the record is listed below and is according to
the desccription of the raw data types in the Record Reference Manual.

For the analog records ai and ao the LINR field determines the data
conversion.

Record       | DTYP   | Conversion
-------------+--------+-------------------------------------------------
ai           | opc    | no conversion: LINR="NO CONVERSION" (record default)
ao           | opc    | no conversion: LINR="NO CONVERSION" (record default)
bi           | opc    | no conversion, VAL may be any value
bi           | opcRaw | conversion: RVAL=0 -> VAL=0, RVAL>0 -> VAL=1
bo           | opc    | conversion: VAL=0 -> RVAL=0, VAL>0 -> RVAL=1 send RVAL to the hardware
mbbi         | opc    | for VAL=0..15 record is set to the according state. NOBT, SHFT ignored
mbbi         | opcRaw | if RVAL=xxVL record is set to state xxST. NOBT, SHFT processed
mbbo         | opc    | ?
mbbo         | opcRaw | ?  further experimets will give new and exciting information,
mbbiDirect   | opc    | ?  what this records does! See next version.
mbbiDirect   | opcRaw | ?  mbboDirect   | opc    | ?
longin       | opc    | no conversion
longout      | opc    | no conversion
stringin     | opc    | no conversion stringout    | opc    | no conversion
waveform     | opc    | no conversion


The multibit records (mbbo, mbbi, mbboDirect and mbbiDirect) have the fields
NOBT and SHFT to select a special part of the 16 bit data input. This is also
supported by the device support.


Timestamps
------------------------------------------------------------------------------

It is possible to choose the timestamp source. Default is the EPICS
timestamp, but if the field TSE="-2" the timestamp of the OPC item
will be used.

Known Problems
==============================================================================

iocLog and EPICS 3.14.2
------------------------------------------------------------------------------

Due to problems with the Windows Socket Library there are two patched files for the EPICS base to make it work:

  <epics base>/src/libCom/logClient.h
  <epics base>/src/libCom/logClient.c
  This patch is neither neccessary if IOC-Logging is not used nor for versions newer
than EPICS 3.14.2

Running many process variables in one iocShell
------------------------------------------------------------------------------

If there are more than ca. 1800 PVs running on an iocShell following occures:

- the CPU load is near 100% - Error message: 'callback buffer overflow' - means there are PVs lost.

It seams to be a problem of the Windows task priorities. Solution:

- Try more groups. - We reached best result with iocShell instances at several virtual machines.

Out records: The value written by EPICS is ignored by the PLC
------------------------------------------------------------------------------

see section "(Record scanning: #recordScan)" - Out Records



